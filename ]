using DrWatson
@quickactivate :ens

using JLD2 
using Clustering
using PyCall
using StatsBase
using Plots

include(srcdir("spline", "spline-plots.jl"))
include(srcdir("spline", "spline-utils.jl"))


multi_all = load(datadir("spline", "multi-all.jld2"));
lift_all = load(datadir("spline", "lift-all.jld2"));

df = combine_simple_analysis(multi_all)
#%


idx = 1.5 .< df.x[1] .< 4.5
X = hcat(zscore.(getindex.(df.mean, Ref(idx)))...)


n = 9
R = kmeans(X, n, maxiter=20000, display=:iter)
a = assignments(R)
p = map(1:n) do i
	plot(getindex.(df.x[a .== i], Ref(idx)), getindex.(df.mean[a .== i], Ref(idx)), lab="")
	plot!(getindex(df.x[a .== i][1], idx), R.centers[:, i], l=(1.5, :black, :dash), label="center")
end
xticks!.(p, Ref([2, 3, 4]), Ref(["lift", "cover", "grasp"]))
plot(p..., size=(900, 900))



#% multi psth
data = load_data("data-v6.arrow");
data = data[in.(data.index, Ref(parse.(Int, df.idx))), :];


pad = 150
num_bins = 12
b1 = 5
n, r = section_trial(data, pad, num_bins, b1);
Xm = hcat([mean(i) for i in n]...)

n = 9
R = kmeans(X, n, maxiter=20000, display=:iter)
a = assignments(R)
p = map(1:n) do i
	plot(getindex.(df.x[a .== i], Ref(idx)), getindex.(df.mean[a .== i], Ref(idx)), lab="")
	plot!(getindex(df.x[a .== i][1], idx), R.centers[:, i], l=(1.5, :black, :dash), label="center")
end
l = size(ordered_n, 1)
xticks!([1, l÷4, l÷2-num_bins÷2, l÷2+num_bins÷2, l÷4*3, l], ["lift", "cover", "grasp"]) 

plot(p..., size=(900, 900))
