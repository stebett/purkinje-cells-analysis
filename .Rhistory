library(STAR)
sim.agg <- function(file, n=1) {
res = read_rdata(file)
sims = tryCatch(sim(res, n), error=function(e) e)
list(fake=sims, index1=res$index1, index2=res$index2, group=res$group, reference=res$reference, landmark=res$landmark)
}
sim <- function(res, n) {
lfun = lapply(res$rnfun['r.timeSinceLastSpike'], mkSelf)
trials = lapply(split(res$data, res$data$trial), function(x) x[, names(res$gss$mf)])
fake = mapply(function(x) replicate(n, as.double(thinProcess(object=res$gss,
 m2uFctList=lfun,
 trueData=x,
 formerSpikes=-600))), 
  trials, SIMPLIFY=FALSE)
}
read_rdata <- function(file) {
r_data <- load(file)
x <- get(r_data)
return(x)
}
inpath = "data/analyses/spline/batch-8/best-neigh/out/data/
"
infiles <- list.files(path=inpath, pattern=".R", full.names=T, all.files=T)
file = infiles[8]
res = read_rdata(file)
infiles[8]
infiles[[8]]
infiles
inpath
inpath = "data/analyses/spline/batch-8/best-neigh/out/data/"
infiles <- list.files(path=inpath, pattern=".R", full.names=T, all.files=T)
infiles <- list.files(path=inpath, pattern=".R", full.names=T, all.files=T)
infiles
file = infiles[8]
file
res = read_rdata(file)
object=res$gss
trials = lapply(split(res$data, res$data$trial), function(x) x[, names(res$gss$mf)])
x = trials[1]
x
trueData = x
intensityMax <- maxIntensity(object, trueData, ...)
maxIntensity
intensityMax <- maxIntensity(object, trueData)
intensityMax <- maxIntensity(object, trueData, ...)
if (missing(intensityMax)) {
intensityMax <- maxIntensity(object, trueData, ...)
}
traceback()
intensityMax <- maxIntensity(object, trueData, ...)
traceback()
intensityMax <- maxIntensity(object, trueData)
traceback()
infiles
infiles[8]
file
thinProcess
library(STAR)
thinProcess
res
x
fake = mapply(function(x) replicate(n, as.double(thinProcess(object=res$gss,
 m2uFctList=lfun,
 trueData=x,
 formerSpikes=-600))), 
fake = mapply(function(x) replicate(n, as.double(thinProcess(object=res$gss,
 m2uFctList=lfun,
 trueData=x,
 formerSpikes=-600))
)
)
fake
as.double(thinProcess(object=res$gss,
 m2uFctList=lfun,
 trueData=x,
 formerSpikes=-600))
lfun = lapply(res$rnfun['r.timeSinceLastSpike'], mkSelf)
as.double(thinProcess(object=res$gss,
 m2uFctList=lfun,
 trueData=x,
 formerSpikes=-600))
object
trueData
maxIntensity(object, trueData)
traceback
traceback()
diff(time)
time
maxIntensity
mf = object[["mf"]]
mf
allVN <- names(mf)[names(mf) %in% object[["terms"]][["labels"]]]
allVN
nVar <- length(allVN)
binWidth <- with(dfWithTime, diff(time)[1])
dfWithTime = trueData
binWidth <- with(dfWithTime, diff(time)[1])
time
dfWithTime
binWidth=1
nbPrev <- dim(mf)[1]
nbPrev
df0 <- mf[nbPrev, allVN]
IFct <- switch(family4fit, binomial = function(df = df0) {
   pred <- exp(predict(object, df))
   pred/(1 + pred)/binWidth
IFct
IFct <- switch(family4fit, binomial = function(df = df0) {
   pred <- exp(predict(object, df))
   pred/(1 + pred)/binWidth
}, poisson = function(df = df0) {
exp(predict(object, df))/binWidth
})
family4fit <- object[["call"]][["family"]]
IFct <- switch(family4fit, binomial = function(df = df0) {
   pred <- exp(predict(object, df))
   pred/(1 + pred)/binWidth
}, poisson = function(df = df0) {
exp(predict(object, df))/binWidth
})
IFct
targetFct <- function(p) {
p <- exp(p)
p <- p/(1 + p)
p <- matrix(p, nrow = 1, dimnames = list(NULL, allVN))
-predict(object, as.data.frame(p))
}
targetFct
posMax <- optim(rep(0, length(allVN)), targetFct, method = "BFGS",
...)$par
posMax <- optim(rep(0, length(allVN)), targetFct, method = "BFGS",
posMax <- optim(rep(0, length(allVN)), targetFct, method = "BFGS",
)$par
posMax
posMax <- exp(posMax)
posMax <- posMax/(1 + posMax)
posMax <- matrix(posMax, nrow = 1, dimnames = list(NULL,
   allVN))
posMax
IFct(as.data.frame(posMax)) * 1.1
maxIntensity <- 
function (object, dfWithTime, binWidth=1., ...)
{
if (!inherits(object, c("ssanova", "ssanova0")))
stop("object should be a ssanova or a ssanova0 object.")
family4fit <- object[["call"]][["family"]]
if (!(family4fit %in% c("binomial", "poisson")))
stop("The fit should have been done with the binomial or the poisson family.")
mf <- object[["mf"]]
allVN <- names(mf)[names(mf) %in% object[["terms"]][["labels"]]]
nVar <- length(allVN)
nbPrev <- dim(mf)[1]
df0 <- mf[nbPrev, allVN]
IFct <- switch(family4fit, binomial = function(df = df0) {
   pred <- exp(predict(object, df))
   pred/(1 + pred)/binWidth
}, poisson = function(df = df0) {
exp(predict(object, df))/binWidth
})
targetFct <- function(p) {
p <- exp(p)
p <- p/(1 + p)
p <- matrix(p, nrow = 1, dimnames = list(NULL, allVN))
-predict(object, as.data.frame(p))
}
posMax <- optim(rep(0, length(allVN)), targetFct, method = "BFGS",
...)$par
posMax <- exp(posMax)
posMax <- posMax/(1 + posMax)
posMax <- matrix(posMax, nrow = 1, dimnames = list(NULL,
   allVN))
IFct(as.data.frame(posMax)) * 1.1
}
intensityMax <- maxIntensity(object, trueData, ...)
intensityMax <- maxIntensity(object, trueData)
intensityMax
from <- with(trueData, range(time))
trueData
with(trueData, range(time))
time
range(time)
trueData
typeof(trueData)
x = as.data.frame(trueData)
x
with(trueData, range(time))
with(x, range(time))
x
typeof(x)
x = as.data.frame(trueData)
x
typeof(x)
as.data.frame(trueData)
typeof(as.data.frame(trueData))
typeof(data.frame(trueData))
typeof(dataframe(trueData))
typeof(data.frame(unlist(trueData)))
l = x
df <- data.frame(matrix(unlist(l), nrow=length(l), byrow=TRUE))
df
typeof(df)
do.call(rbind.data.frame, l)
x = do.call(rbind.data.frame, l)
typeof(x)
l
class(x)
class(l)
class(trueData)
x
l
x = as.data.frame(trueData)
class(x)
with(x, range(time)
)
with(x, time)
x
x
names(x)
names(trueData)
names(trueData["1"])
names(trueData[["1"]])
library(STAR)
maxIntensity
trials
trials[["1"]]
trueData = trials[["1"]]
with(trueData, time)
with(trueData, range(time))
with(trueData, diff(time))
with(trueData, diff(time))[1]
from <- with(trueData, range(time))
to <- from[2]
from <- from[1]
to
from
n2sim <- (to - from) * intensityMax
n2sim <- ceiling(n2sim + 3 * sqrt(n2sim))
pProc <- from + cumsum(rexp(n2sim, intensityMax))
while (max(pProc) < to) {
pProc <- c(pProc, max(pProc) + cumsum(rexp(n2sim, intensityMax)))
}
pProc <- pProc[pProc <= to]
st <- formerSpikes
st = -600
stLength <- length(st)
pProc
poissonTime = pProc[1]
vVector <- sapply(m2uFctList, function(f) f(poissonTime,
st))
m2uFctList = lfun
vVector <- sapply(m2uFctList, function(f) f(poissonTime,
st))
vVector
dfIdx <- (poissonTime - from)%/%binWidth + 1
dfIdx
theDF <- trueData[dfIdx, ]
theDF
theDF[, varVN] <- vVector
varVN <- allVN[allVN %in% names(m2uFctList)]
theDF[, varVN] <- vVector
theDF
intensity <- IFct(theDF)
intensity
intensityMax
thinProcess(object, lfun, trueData, -600)
sim.agg <- function(file, n=1) {
res = read_rdata(file)
sims = tryCatch(sim(res, n), error=function(e) e)
list(fake=sims, index1=res$index1, index2=res$index2, group=res$group, reference=res$reference, landmark=res$landmark)
}
sim <- function(res, n) {
lfun = lapply(res$rnfun['r.timeSinceLastSpike'], mkSelf)
trials = lapply(split(res$data, res$data$trial), function(x) x[, names(res$gss$mf)])
fake = mapply(function(x) replicate(n, as.double(thinProcess(object=res$gss,
 m2uFctList=lfun,
 trueData=x,
 formerSpikes=-600))), 
  trials, SIMPLIFY=FALSE)
}
read_rdata <- function(file) {
r_data <- load(file)
x <- get(r_data)
return(x)
}
simulations = lapply(infiles, sim.agg)
warnings()
simulations
outpath = paste("data/analyses/spline/batch-8/best-neigh", "post-proc", "simulated.rds", sep="/")
outpath = "data/analyses/spline/batch-8/best-neigh/post-proc/simulated.rds"
saveRDS(simulations, outpath)
inpath = "data/analyses/spline/batch-8/best-all/out/data/"
infiles <- list.files(path=inpath, pattern=".R", full.names=T, all.files=T)
simulations = lapply(infiles, sim.agg)
outpath = paste(args[1], "post-proc", "simulated.rds", sep="/")
outpath = "data/analyses/spline/batch-8/best-all/post-proc/simulated.rds"
saveRDS(simulations, outpath)
